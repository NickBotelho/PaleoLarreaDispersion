weight = weight + 1
}
}
for (x in 1:5)
{
if (first5hours$Predicted_Rain[x] > 0.05)
{
print("Possible chance of rain")
weight = weight + 1
}
if (first5hours$Temp[x] < 14 || first5hours$Temp[x] > 104)
{
print("Temperature outside is not safe for the drone")
weight = weight + 1
}
if (first5hours$Average_Wind_Speed[x] > 22)
{
print("Winds too heavy")
weight = weight +1
}
if (first5hours$Wind_Gust[x] > 22)
{
print("Wind Gust possibly too heavy")
weight = weight + 1
}
}
{
if (first5hours$Predicted_Rain[x] > 0.05)
{
print("Possible chance of rain")
weight = weight + 1
}
if (first5hours$Temp[x] < 14 || first5hours$Temp[x] > 104)
{
print("Temperature outside is not safe for the drone")
weight = weight + 1
}
if (first5hours$Average_Wind_Speed[x] > 22)
{
print("Winds too heavy")
weight = weight +1
}
if (first5hours$Wind_Gust[x] > 22)
{
print("Wind Gust possibly too heavy")
weight = weight + 1
}
}
if (weight == 0){
print("Conditions around are good")
}
first5hours
weight = 0
# for (hours in 1:5) #loop to go through every hour
# {
#   if (first5hours$Current_Rain[hours] > 0.0005)
#   {
#     #print("Rain Detected")
#     weight = weight + 1
#   }
# }
for (x in 1:5)
{
if (first5hours$Predicted_Rain[x] > 0.05)
{
print("Possible chance of rain")
weight = weight + 1
}
if (first5hours$Temp[x] < 14 || first5hours$Temp[x] > 104)
{
print("Temperature outside is not safe for the drone")
weight = weight + 1
}
if (first5hours$Average_Wind_Speed[x] > 22)
{
print("Winds too heavy")
weight = weight +1
}
if (first5hours$Wind_Gust[x] > 22)
{
print("Wind Gust possibly too heavy")
weight = weight + 1
}
}
if (weight == 0){
print("Conditions around are good")
}
#at a specific time==================================================
weight = 0
specifiedHour = readline(prompt = "In hour many hours will you fly?")
for (x in specifiedHour){
if (home_forecast_hourly$Predicted_Rain[x] > 0.05)
{
print("Possible chance of rain")
weight = weight + 1
}
if (home_forecast_hourly$Temp[x] < 14 || home_forecast_hourly$Temp[x] > 104)
{
print("Temperature outside is not safe for the drone")
weight = weight + 1
}
if (home_forecast_hourly$Average_Wind_Speed[x] > 22)
{
print("Winds too heavy")
weight = weight +1
}
if (home_forecast_hourly$Wind_Gust[x] > 22)
{
print("Wind Gust possibly too heavy")
weight = weight + 1
}
}
specifiedHour = strtoi(specifiedHour, base = 10)
for (x in specifiedHour){
if (home_forecast_hourly$Predicted_Rain[x] > 0.05)
{
print("Possible chance of rain")
weight = weight + 1
}
if (home_forecast_hourly$Temp[x] < 14 || home_forecast_hourly$Temp[x] > 104)
{
print("Temperature outside is not safe for the drone")
weight = weight + 1
}
if (home_forecast_hourly$Average_Wind_Speed[x] > 22)
{
print("Winds too heavy")
weight = weight +1
}
if (home_forecast_hourly$Wind_Gust[x] > 22)
{
print("Wind Gust possibly too heavy")
weight = weight + 1
}
}
if (weight == 0){
print(paste("Conditions will be good in ", specifiedHour, " hours"))
}
#END OF SPECIFIED HOOUR ===============================================
#START OF SPECIFIED INTERVAL===========================================
startHour = readline(prompt = "In hour many hours will you start flying? (1 for right now)")
startHour = strtoi(startHour, base = 10)
endHour = readline(prompt = "For how many hours do you plan to fly?")
endHour = strtoi(endHour, base = 10)
weight = 0
for (x in startHour:endHour){
if (home_forecast_hourly$Predicted_Rain[x] > 0.05)
{
print("Possible chance of rain")
weight = weight + 1
}
if (home_forecast_hourly$Temp[x] < 14 || home_forecast_hourly$Temp[x] > 104)
{
print("Temperature outside is not safe for the drone")
weight = weight + 1
}
if (home_forecast_hourly$Average_Wind_Speed[x] > 22)
{
print("Winds too heavy")
weight = weight +1
}
if (home_forecast_hourly$Wind_Gust[x] > 22)
{
print("Wind Gust possibly too heavy")
weight = weight + 1
}
}
if (weight == 0){
print(paste("Conditions will be good in ", specifiedHour, " hours"))
}
print(paste("Conditions will be good in  ", startHour, " and for ", endHour - startHour, " hours"))
print(paste("Conditions will be good in ", startHour, "hours and on "))
plot(paleo.predict)
plot(paleo.predict2)
plot(paleo.predict3)
head(no)
no = nicheOverlap(diva_predict, trid_predict,
stat='D', mask=FALSE, checkNegatives=FALSE)
head(no)
?sample
sample_n(loc, size = 5, replace=FALSE)
sample_n(loc, size = 5, replace=FALSE)
sample_n(loc, size = 5, replace=FALSE)
sample_n(loc, size = 5, replace=FALSE)
sample_n(loc, size = 5, replace=FALSE)
sample(nrow(loc), size = 5)
sample(nrow(loc), size = 5)
s1 = sample(1:nrow(merge), size=n1)
s1 = sample(nrow(merge), size=n1)
noTest = function(tbl1, tbl2, clim){
n1 = nrow(tbl1)
n2 = nrow(tbl2)
merge = rbind(tbl1, tbl2)
s1 = sample(nrow(merge), size=n1)
sub1 = merge[s1,]
sub2 = merge[-s1,]
return(sub1)
}
noTest(divaloc, loc, clim=clim)
noTest(divaloc, loc, clim=clim)
noTest(divaloc, loc, clim=clim)
noTest(divaloc, loc, clim=clim)
noTest(divaloc, loc, clim=clim)
noTest(divaloc, loc, clim=clim)
noTest(divaloc, loc, clim=clim)
noTest(divaloc, loc, clim=clim)
noTest(divaloc, loc, clim=clim)
noTest(divaloc, loc, clim=clim)
noTest(divaloc, loc, clim=clim)
noTest(divaloc, loc, clim=clim)
noTest(divaloc, loc, clim=clim)
noTest(divaloc, loc, clim=clim)
noTest(divaloc, loc, clim=clim)
noTest = function(tbl1, tbl2, clim){
n1 = nrow(tbl1)
n2 = nrow(tbl2)
merge = rbind(tbl1, tbl2)
s1 = sample(nrow(merge), size=n1)
sub1 = merge[s1,]
sub2 = merge[-s1,]
return(sub2)
}
noTest(divaloc, loc, clim=clim)
noTest(divaloc, loc, clim=clim)
noTest(divaloc, loc, clim=clim)
noTest(divaloc, loc, clim=clim)
noTest(divaloc, loc, clim=clim)
noTest(divaloc, loc, clim=clim)
noTest(divaloc, loc, clim=clim)
noTest(divaloc, loc, clim=clim)
noTest = function(tbl1, tbl2, clim){
n1 = nrow(tbl1)
n2 = nrow(tbl2)
merge = rbind(tbl1, tbl2)
s1 = sample(nrow(merge), size=n1)
sub1 = merge[s1,]
sub2 = merge[-s1,]
#enmeval
predictors = crop(wc2, paleo_ext)
s1_eval = ENMevaluate(occ=as.data.frame(sub1), env = predictors, method='block', parallel=FALSE, fc=c("L", "LQ"), RMvalues=seq(0.5, 2, 0.5), rasterPreds=T)
#s1_best=which(s1_eval@results$AICc == min(s1_eval@results$AICc))
s2_eval = ENMevaluate(occ=as.data.frame(sub2), env = predictors, method='block', parallel=FALSE, fc=c("L", "LQ"), RMvalues=seq(0.5, 2, 0.5), rasterPreds=T)
#s2_best =which(s2_eval@results$AICc == min(s2_eval@results$AICc))
s1_predict = predict(wc2, s1_eval@models[[best]], type = "cloglog")
s2_predict = predict(wc2, s2_eval@models[[best]], type = "cloglog")
no = nicheOverlap(s1_predict, s2_predict,
stat='D', mask=FALSE, checkNegatives=FALSE)
return(no)
}
noTest(divaloc, loc, clim = clim)
nicheOverlapStored = data.frame()
x1 = 1
for (x1 in 1:5){
noTestResult = noTest(divaloc, loc, clim = clim)
nicheOverlapStored = rbind(nicheOverlapStored, noTestResult)
}
save.image('filename.RData')
nicheOverlapStored
loc?
#Eval for the Tridentata
eval = ENMevaluate(occ=as.data.frame(loc), env = predictors, method='block', parallel=FALSE, fc=c("L", "LQ"), RMvalues=seq(0.5, 2, 0.5), rasterPreds=T)
loc
loc[300,]
filter(loc, nrow(300))
filter(loc, nrow()<300)
loc[1:300,]
loc333 = loc[1:333]
loc333 = loc[1:333,]
#Eval for the Tridentata
eval = ENMevaluate(occ=as.data.frame(loc333), env = predictors, method='block', parallel=FALSE, fc=c("L", "LQ"), RMvalues=seq(0.5, 2, 0.5), rasterPreds=T)
#ENMeval > best model for tridentata
best=which(eval@results$AICc == min(eval@results$AICc))
trid_predict = predict(wc2, eval@models[[best]], type = "cloglog")
no = nicheOverlap(diva_predict, trid_predict,
stat='D', mask=FALSE, checkNegatives=FALSE)
#determine significance
#take an equal random sample from both groups, build 2 models on the random points and calculate an overlap on that
head(no)
#Eval for the Tridentata
eval = ENMevaluate(occ=as.data.frame(loc), env = predictors, method='block', parallel=FALSE, fc=c("L", "LQ"), RMvalues=seq(0.5, 2, 0.5), rasterPreds=T)
0.7*(nrow(divaloc))
(int)0.7*(nrow(divaloc))
floor(0.7*(nrow(divaloc)))
plotRandomSample = function(tbl1, clim){
plotSize = floor(0.7*(nrow(tbl1)))
s1 = sample(nrow(tbl1), size=plotSize)
predictors = crop(wc2, paleo_ext)
s1_eval = ENMevaluate(occ=as.data.frame(sub1), env = predictors, method='block', parallel=FALSE,
fc=c("L", "LQ"), RMvalues=seq(0.5, 2, 0.5), rasterPreds=T)
#cclgmbi
s1.paleoplot1 = crop(paleo_plots2, paleo_ext)
s1.predict1 = predict(s1.paleoplot1, s1_eval@models[[best]], type = "cloglog")
plot(s1.predict1)
#melgmbi
s1.paleoplot2 = crop(second_paleo_plots2, paleo_ext)
s1.predict2 = predict(s1.paleoplot2, s1_eval@models[[best]], type = "cloglog")
plot(s1.predict2)
#mrlgmbi
s1.paleoplot3 = crop(third_paleo_plots2, paleo_ext)
s1.predict2 = predict(s1.paleoplot3, s1_eval@models[[best]], type = "cloglog")
plot(s1.predict3)
}
plotRandomSample(divaloc, clim = clim)
plotRandomSample(divaloc, clim = clim)
plotRandomSample = function(tbl1, clim){
plotSize = floor(0.7*(nrow(tbl1)))
s1 = sample(nrow(tbl1), size=plotSize)
predictors = crop(wc2, paleo_ext)
s1_eval = ENMevaluate(occ=as.data.frame(s1), env = predictors, method='block', parallel=FALSE,
fc=c("L", "LQ"), RMvalues=seq(0.5, 2, 0.5), rasterPreds=T)
#cclgmbi
s1.paleoplot1 = crop(paleo_plots2, paleo_ext)
s1.predict1 = predict(s1.paleoplot1, s1_eval@models[[best]], type = "cloglog")
plot(s1.predict1)
#melgmbi
s1.paleoplot2 = crop(second_paleo_plots2, paleo_ext)
s1.predict2 = predict(s1.paleoplot2, s1_eval@models[[best]], type = "cloglog")
plot(s1.predict2)
#mrlgmbi
s1.paleoplot3 = crop(third_paleo_plots2, paleo_ext)
s1.predict2 = predict(s1.paleoplot3, s1_eval@models[[best]], type = "cloglog")
plot(s1.predict3)
}
plotRandomSample(divaloc, clim = clim)
sample(nrow(divaloc), size=200)
sample(divaloc, size=200)
plotRandomSample(divaloc, clim = clim)
?sample
plotRandomSample = function(tbl1, clim){
plotSize = floor(0.7*(nrow(tbl1)))
s1 = sample_n(tbl1, size=plotSize)
predictors = crop(wc2, paleo_ext)
s1_eval = ENMevaluate(occ=as.data.frame(s1), env = predictors, method='block', parallel=FALSE,
fc=c("L", "LQ"), RMvalues=seq(0.5, 2, 0.5), rasterPreds=T)
#cclgmbi
s1.paleoplot1 = crop(paleo_plots2, paleo_ext)
s1.predict1 = predict(s1.paleoplot1, s1_eval@models[[best]], type = "cloglog")
plot(s1.predict1)
#melgmbi
s1.paleoplot2 = crop(second_paleo_plots2, paleo_ext)
s1.predict2 = predict(s1.paleoplot2, s1_eval@models[[best]], type = "cloglog")
plot(s1.predict2)
#mrlgmbi
s1.paleoplot3 = crop(third_paleo_plots2, paleo_ext)
s1.predict2 = predict(s1.paleoplot3, s1_eval@models[[best]], type = "cloglog")
plot(s1.predict3)
}
plotRandomSample(divaloc, clim = clim)
plotRandomSample = function(tbl1, clim){
plotSize = floor(0.7*(nrow(tbl1)))
s1 = sample_n(tbl1, size=plotSize)
predictors = crop(wc2, paleo_ext)
s1_eval = ENMevaluate(occ=as.data.frame(s1), env = predictors, method='block', parallel=FALSE,
fc=c("L", "LQ"), RMvalues=seq(0.5, 2, 0.5), rasterPreds=T)
#cclgmbi
s1.paleoplot1 = crop(paleo_plots2, paleo_ext)
s1.predict1 = predict(s1.paleoplot1, s1_eval@models[[best]], type = "cloglog")
plot(s1.predict1)
#melgmbi
s1.paleoplot2 = crop(second_paleo_plots2, paleo_ext)
s1.predict2 = predict(s1.paleoplot2, s1_eval@models[[best]], type = "cloglog")
plot(s1.predict2)
#mrlgmbi
s1.paleoplot3 = crop(third_paleo_plots2, paleo_ext)
s1.predict3 = predict(s1.paleoplot3, s1_eval@models[[best]], type = "cloglog")
plot(s1.predict3)
}
plotRandomSample(divaloc, clim = clim)
x1 = 1
for (x1 in 1:100){
noTestResult = noTest(divaloc, loc, clim = clim)
nicheOverlapStored = rbind(nicheOverlapStored, noTestResult)
}
setwd("~/GitHub/IndependentResearch")
save.image(file='10-17Environment.RData')
nicheOverlapStored
plotRandomSample = function(tbl1, df, clim){
plotSize = floor(0.7*(nrow(tbl1)))
s1 = sample_n(tbl1, size=plotSize)
predictors = crop(wc2, paleo_ext)
s1_eval = ENMevaluate(occ=as.data.frame(s1), env = predictors, method='block', parallel=FALSE,
fc=c("L", "LQ"), RMvalues=seq(0.5, 2, 0.5), rasterPreds=T)
#cclgmbi
s1.paleoplot1 = crop(paleo_plots2, paleo_ext)
s1.predict1 = predict(s1.paleoplot1, s1_eval@models[[best]], type = "cloglog")
#plot(s1.predict1)
#melgmbi
s1.paleoplot2 = crop(second_paleo_plots2, paleo_ext)
s1.predict2 = predict(s1.paleoplot2, s1_eval@models[[best]], type = "cloglog")
#plot(s1.predict2)
#mrlgmbi
s1.paleoplot3 = crop(third_paleo_plots2, paleo_ext)
s1.predict3 = predict(s1.paleoplot3, s1_eval@models[[best]], type = "cloglog")
#plot(s1.predict3)
s1.predict_df = data.frame("cclgmbi (1)" = s1.predict1,
"melgmbi (2)" = s1.predict2,
"mrlgbmi (3)" = s1.predict3)
df = rbind(df, s1.predict_df)
}
x1 = 1
diva_predict_df = data.frame()
for (x1 in 1:100){
plotRandomSample(divaloc, diva_predict_df, clim = clim)
}
x1 = 1
diva_predict_df = data.frame()
for (x1 in 1:2){
plotRandomSample(divaloc, diva_predict_df, clim = clim)
}
png(file="C:/Users/Nickp/Documents/GitHub/IndependentResearch/cclmgbiPlot",x,".png",
width=600, height=350)
png(file="C:/Users/Nickp/Documents/GitHub/IndependentResearch/cclmgbiPlot.png",
width=600, height=350)
png(file="C:/Users/Nickp/Documents/GitHub/IndependentResearch/cclmgbiPlot.png")
tiff(file="C:/Users/Nickp/Documents/GitHub/IndependentResearch/cclmgbiPlot.tiff")
tiff(file="C:/Users/Nickp/Documents/GitHub/IndependentResearch/cclmgbiPlot.tiff")
plotRandomSample = function(tbl1, df, clim){
plotSize = floor(0.7*(nrow(tbl1)))
s1 = sample_n(tbl1, size=plotSize)
predictors = crop(wc2, paleo_ext)
s1_eval = ENMevaluate(occ=as.data.frame(s1), env = predictors, method='block', parallel=FALSE,
fc=c("L", "LQ"), RMvalues=seq(0.5, 2, 0.5), rasterPreds=T)
#cclgmbi
s1.paleoplot1 = crop(paleo_plots2, paleo_ext)
s1.predict1 = predict(s1.paleoplot1, s1_eval@models[[best]], type = "cloglog")
plot(s1.predict1)
tiff(file="C:/Users/Nickp/Documents/GitHub/IndependentResearch/cclmgbiPlot.tiff")
#melgmbi
s1.paleoplot2 = crop(second_paleo_plots2, paleo_ext)
s1.predict2 = predict(s1.paleoplot2, s1_eval@models[[best]], type = "cloglog")
plot(s1.predict2)
#mrlgmbi
s1.paleoplot3 = crop(third_paleo_plots2, paleo_ext)
s1.predict3 = predict(s1.paleoplot3, s1_eval@models[[best]], type = "cloglog")
plot(s1.predict3)
# s1.predict_df = data.frame("cclgmbi (1)" = s1.predict1,
#                                   "melgmbi (2)" = s1.predict2,
#                                   "mrlgbmi (3)" = s1.predict3)
# df = rbind(df, s1.predict_df)
}
x1 = 1
diva_predict_df = data.frame()
for (x1 in 1:2){
plotRandomSample(divaloc, diva_predict_df, clim = clim)
}
tiff(file="C:/Users/Nickp/Documents/GitHub/IndependentResearch/cclmgbiPlot"+x1+".tiff")
?stack
myStack = paleo.predict
myStack = addLayer(myStack, paleo.predict2)
plot(myStack)
plot(paleo.predict3)
View(myStack)
heaD(myStack)
head(myStack)
dev.off()
ict3)
plot(paleo.predict3)
plot(cars)
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
plot(paleo.predict3)
plot(myStack)
diva_cclgmbi = raster()
diva_cclgmbi = raster()
diva_melgmbi = raster()
diva_mrlgmbi = raster()
x1 = 1
for (x1 in 1:1){
plotRandomSample(divaloc, diva_cclgmbi, diva_melgmbi, diva_mrlgmbi, clim = clim)
}
plotRandomSample = function(tbl1, raster1, raster2, raster3, clim){
plotSize = floor(0.7*(nrow(tbl1)))
s1 = sample_n(tbl1, size=plotSize)
predictors = crop(wc2, paleo_ext)
s1_eval = ENMevaluate(occ=as.data.frame(s1), env = predictors, method='block', parallel=FALSE,
fc=c("L", "LQ"), RMvalues=seq(0.5, 2, 0.5), rasterPreds=T)
#cclgmbi
s1.paleoplot1 = crop(paleo_plots2, paleo_ext)
s1.predict1 = predict(s1.paleoplot1, s1_eval@models[[best]], type = "cloglog")
#plot(s1.predict1)
#tiff(file="C:/Users/Nickp/Documents/GitHub/IndependentResearch/paleoCclmgbi/cclmgbiPlot.tiff")
raster1 = addLayer(raster1, s1.predict1)
#melgmbi
s1.paleoplot2 = crop(second_paleo_plots2, paleo_ext)
s1.predict2 = predict(s1.paleoplot2, s1_eval@models[[best]], type = "cloglog")
#plot(s1.predict2)
raster2 = addLayer(raster2, s1.predict2)
#mrlgmbi
s1.paleoplot3 = crop(third_paleo_plots2, paleo_ext)
s1.predict3 = predict(s1.paleoplot3, s1_eval@models[[best]], type = "cloglog")
#plot(s1.predict3)
raster3 = addLayer(raster3, s1.predict3)
}
x1 = 1
for (x1 in 1:1){
plotRandomSample(divaloc, diva_cclgmbi, diva_melgmbi, diva_mrlgmbi, clim = clim)
}
plot(diva_cclgmbi)
View(diva_cclgmbi)
diva_cclgmbi = RasterStack
diva_cclgmbi = rasterStack()
View(myStack)
diva_cclgmbi = paleo.predict
diva_melgmbi = paleo.predict2
diva_mrlgmbi = paleo.predict3
x1 = 1
for (x1 in 1:1){
plotRandomSample(divaloc, diva_cclgmbi, diva_melgmbi, diva_mrlgmbi, clim = clim)
}
